<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>30天学java</title>
    <link href="/2022/06/01/dierg/"/>
    <url>/2022/06/01/dierg/</url>
    
    <content type="html"><![CDATA[<h1 id="Day01-HelloWorld"><a href="#Day01-HelloWorld" class="headerlink" title="Day01 HelloWorld"></a>Day01 HelloWorld</h1><p>要求：</p><ul><li>在你的电脑上装好Jdk1.8 开发环境</li><li>请在记事本或者notepad++等编辑器写出完整的Java版本 Hello World代码</li><li>请在 cmd完成 HelloWorld.java 的编译和运行</li><li>可以在代码里打印中文，看看是否会出现报错</li></ul><hr><p>1、查看是否安装好jdk1.8环境，命令行输入<code>java</code>查看结果。</p><p><img src="1.png" alt="结果1"></p><p>2、记事本写好代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;Hello World，你好世界&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、控制台编译成.class文件，指令<code>javac Hello.java</code></p><p>注意：若有中文，指令需为<code>javac -encoding UTF8 Hello.java</code></p><p>4、命令行输入<code>java Hello</code>查看结果</p><p><img src="2.png" alt="结果2"></p><h1 id="Day02-面向对象"><a href="#Day02-面向对象" class="headerlink" title="Day02 面向对象"></a>Day02 面向对象</h1><p>要求：</p><ul><li><p>学习4类8种 java数据类型</p></li><li><p>使用基本数据类型实现简单的四则运算，并打印结果，例如 int a = 1; int b = 1; int sum = a + b; </p></li><li><p>类型转换。例如  int转byte，要求全部8种数据类型都自己练习转换至少一次，看看是否报错。思考：short a = 1; short b = 2; 那么a+b 是什么类型</p></li><li><p>学习什么是实例变量、什么是静态变量</p></li><li><p>学习Java修饰符，private | protected | public，static、final、abstract、synchronized、transient、volatile 明确其使用场景和注意事项</p></li><li><p>设计一个Java对象class Animal，包含成员变量：名字 String name、年龄 int age、身高 float height，包含静态变量 String feature = “动物都会动”;</p></li><li><p>在main方法中实例化对象Animal，设置它的属性值</p></li><li><p>在CMD中打印Animal所有的属性值</p></li></ul><hr><h2 id="8中Java数据类型"><a href="#8中Java数据类型" class="headerlink" title="8中Java数据类型"></a>8中Java数据类型</h2><p><strong>byte：</strong></p><ul><li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li><li>最小值是-128（-2^7），最大值是127（2^7-1）。</li></ul><p><strong>short：</strong></p><ul><li>short 数据类型是 16 位、有符号的以二进制补码表示的整数。</li></ul><p><strong>int：</strong></p><ul><li>int 数据类型是32位、有符号的以二进制补码表示的整数。</li></ul><p><strong>long：</strong></p><ul><li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li><li>默认值是<code>0L</code>；</li><li>例子：<code>long a = 100000L; long b = -2000L</code>。</li></ul><p><strong>float:</strong></p><ul><li><p>32位浮点型；</p></li><li><p>例子：float f1 = 234.5f。</p></li></ul><p><strong>double：</strong></p><ul><li>64位浮点型；</li></ul><p><strong>boolean：</strong></p><ul><li>只有两个取值：true or false；</li><li>默认值：flase。</li></ul><p><strong>char：</strong></p><ul><li>char 类型是一个单一的 16 位 Unicode 字符；</li><li>char 数据类型可以储存任何字符，例如：<code>char letter = &#39;A&#39;</code></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>自动类型转换：</strong></p><ul><li>转换从低到高：byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double </li><li>数据类型转换必须满足如下规则：1)在把容量大的类型转换为容量小的类型时必须使用强制类型转换; 2)转换过程中可能导致溢出或损失精度</li></ul><p><strong>强制类型转换：</strong></p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiangZhiZhuanHuan</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i1;<span class="hljs-comment">//强制类型转换为byte</span><br>        System.out.println(<span class="hljs-string">&quot;int强制类型转换为byte后的值等于&quot;</span>+b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实例变量、静态变量"><a href="#实例变量、静态变量" class="headerlink" title="实例变量、静态变量"></a>实例变量、静态变量</h2><p><strong>实例变量：</strong></p><ul><li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li><li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li><li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li><li>实例变量可以声明在使用前或者使用后；</li><li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见。</li></ul><p><strong>静态变量：</strong></p><ul><li>在类中以 static 关键字声明，必须在方法之外；</li><li>静态变量在第一次被访问时创建，在程序结束时销毁。</li></ul><p>二者区别：</p><ul><li>实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量；</li><li>静态变量不属于某个实例对象，而是属于整个类。只要程序加载了类的字节码，不用创建任何实例对象，静态变量就回被分配空间，静态变量就可以被使用了；</li><li>实例变量必须创建对象后，才可以通过这个对象来使用；静态变量则可以直接使用类名来引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">staticInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<span class="hljs-comment">//静态变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<span class="hljs-comment">//实例变量</span><br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StaticTest</span><span class="hljs-params">()</span> &#123;<br>        staticInt++;<br>        random++;<br>        System.out.println(<span class="hljs-string">&quot;staticInt = &quot;</span>+staticInt+<span class="hljs-string">&quot;  random = &quot;</span>+random);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StaticTest</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticTest</span>();<br>        <span class="hljs-type">StaticTest</span> <span class="hljs-variable">test2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticTest</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs staticInt">staticInt = 3  random = 3<br>staticInt = 4  random = 3<br></code></pre></td></tr></table></figure><h2 id="java修饰符"><a href="#java修饰符" class="headerlink" title="java修饰符"></a>java修饰符</h2><p><strong>访问修饰符：</strong></p><ul><li>对于类，可以使用public或default：</li></ul><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>public</td><td>该类可由其他类访问</td></tr><tr><td>default</td><td>该类只能由同一包中的类访问</td></tr></tbody></table><ul><li>对于属性、方法和构造函数：</li></ul><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>public</td><td>所有类都可以访问该代码</td></tr><tr><td>private</td><td>代码只能在声明的类中访问</td></tr><tr><td>default</td><td>该类只能由同一包中的类访问</td></tr><tr><td>protected</td><td>代码可以在相同的包和子类中访问</td></tr></tbody></table><p><strong>非访问修饰符：</strong></p><ul><li>对于类：</li></ul><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>final</td><td>无法修改属性和方法</td></tr><tr><td>static</td><td>属性和方法对于类，而不是对象</td></tr><tr><td>abstract</td><td>只能在方法或类上使用</td></tr><tr><td>transient</td><td>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量</td></tr><tr><td>synchronized</td><td>声明的方法同一时间只能被一个线程访问</td></tr><tr><td>volatile</td><td>成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值</td></tr></tbody></table><p><strong>练习：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> height;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">feature</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;动物都会动&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeight</span><span class="hljs-params">(<span class="hljs-type">float</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        animal.setAge(<span class="hljs-number">2</span>);<br>        animal.setHeight(<span class="hljs-number">10</span>);<br>        animal.setName(<span class="hljs-string">&quot;lili&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;动物的名字是&quot;</span> + animal.getName());<br>        System.out.println(<span class="hljs-string">&quot;动物的年龄是&quot;</span> + animal.getAge());<br>        System.out.println(<span class="hljs-string">&quot;动物的身高是&quot;</span> + animal.getHeight());<br>        System.out.println(Animal.feature);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">动物的名字是lili<br>动物的年龄是2<br>动物的身高是10.0<br>动物都会动<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>30天学java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三哦</title>
    <link href="/2022/06/01/%E7%AC%AC%E4%B8%89%E5%93%A6/"/>
    <url>/2022/06/01/%E7%AC%AC%E4%B8%89%E5%93%A6/</url>
    
    <content type="html"><![CDATA[<p>填一堆内容啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</p>]]></content>
    
    
    <categories>
      
      <category>Diar</category>
      
    </categories>
    
    
    <tags>
      
      <tag>试试拉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>30天学java</title>
    <link href="/2022/06/01/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/06/01/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Day01-HelloWorld"><a href="#Day01-HelloWorld" class="headerlink" title="Day01 HelloWorld"></a>Day01 HelloWorld</h1><p>要求：</p><ul><li>在你的电脑上装好Jdk1.8 开发环境</li><li>请在记事本或者notepad++等编辑器写出完整的Java版本 Hello World代码</li><li>请在 cmd完成 HelloWorld.java 的编译和运行</li><li>可以在代码里打印中文，看看是否会出现报错</li></ul><hr><p>1、查看是否安装好jdk1.8环境，命令行输入<code>java</code>查看结果。</p><p><img src="C:\Users\当归\AppData\Roaming\Typora\typora-user-images\1654083145339.png" alt="1654083145339"></p><p>2、记事本写好代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;Hello World，你好世界&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、控制台编译成.class文件，指令<code>javac Hello.java</code></p><p>注意：若有中文，指令需为<code>javac -encoding UTF8 Hello.java</code></p><p>4、命令行输入<code>java Hello</code>查看结果</p><p><img src="C:\Users\当归\AppData\Roaming\Typora\typora-user-images\1654083429426.png" alt="1654083429426"></p>]]></content>
    
    
    <categories>
      
      <category>30天学java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2022/05/31/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/05/31/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><hr><p>内容</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>试试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
